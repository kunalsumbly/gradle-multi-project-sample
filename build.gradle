import java.util.regex.Matcher

plugins {
    id 'com.github.sherter.google-java-format' version '0.9' apply false
    id 'net.researchgate.release' version '2.8.1'

}


allprojects {
    version = '1.0'
}

apply plugin:'base'


subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.sherter.google-java-format'

    dependencies {
        // for type inference
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        compileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
        testCompileOnly 'org.projectlombok:lombok:1.18.12'

        // for logging
        implementation 'ch.qos.logback:logback-classic:1.2.3'
        implementation 'org.slf4j:slf4j-api:1.7.26'

        implementation 'com.google.guava:guava:29.0-jre'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    }

    repositories {

    }

    repositories {
        jcenter()
        maven {
            url 'https://github.com/kunalsumbly/gradle-multi-project-sample'
            credentials {
                username = System.getenv("GITHUB_USERNAME")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }

    test {
        useJUnitPlatform()
    }

    release {
        failOnCommitNeeded = false
        failOnPublishNeeded = false
        failOnSnapshotDependencies = false
        failOnUnversionedFiles = false
        failOnUpdateNeeded = false
        revertOnFail = true
        preCommitText = ''
        preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
        tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
        newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
        tagTemplate = '${version}'
        versionPropertyFile = 'gradle.properties'
        versionProperties = []
        buildTasks = ['clean']
        versionPatterns = [
                /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
        ]
        scmAdapters = [
                net.researchgate.release.GitAdapter
        ]

        git {
            requireBranch = 'master'
            pushToRemote = 'origin'
            pushToBranchPrefix = ''
            commitVersionFileOnly = false
        }

    }
    compileJava.dependsOn tasks.googleJavaFormat
}
defaultTasks 'clean', 'build'